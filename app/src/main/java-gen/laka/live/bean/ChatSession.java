package laka.live.bean;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT. Enable "keep" sections if you want to edit. 

import org.greenrobot.greendao.annotation.Entity;
import org.greenrobot.greendao.annotation.Id;
import org.greenrobot.greendao.annotation.Generated;
import org.greenrobot.greendao.annotation.Property;
import org.greenrobot.greendao.DaoException;
import laka.live.dao.DaoSession;
import laka.live.dao.ChatSessionDao;

/**
 * Entity mapped to table "CHAT_SESSION".
 */
@Entity(active = true,createInDb = true)
public class ChatSession {
    @Id
    @Property(nameInDb="id")
    private String id;
    private String userId;
    private String nickName;
    private String avatar;
    private Integer level;
    private Integer gender;
    private Short auth;
    private String content;
    private Long date;
    private Integer unreadCnt;
    private Integer type;
    /** Used to resolve relations */
    @Generated(hash = 2040040024)
    private transient DaoSession daoSession;
    /** Used for active entity operations. */
    @Generated(hash = 1308162568)
    private transient ChatSessionDao myDao;
    @Generated(hash = 889125620)
    public ChatSession(String id, String userId, String nickName, String avatar, Integer level,
            Integer gender, Short auth, String content, Long date, Integer unreadCnt, Integer type) {
        this.id = id;
        this.userId = userId;
        this.nickName = nickName;
        this.avatar = avatar;
        this.level = level;
        this.gender = gender;
        this.auth = auth;
        this.content = content;
        this.date = date;
        this.unreadCnt = unreadCnt;
        this.type = type;
    }
    @Generated(hash = 1350292942)
    public ChatSession() {
    }
    public String getId() {
        return this.id;
    }
    public void setId(String id) {
        this.id = id;
    }
    public String getUserId() {
        return this.userId;
    }
    public void setUserId(String userId) {
        this.userId = userId;
    }
    public String getNickName() {
        return this.nickName;
    }
    public void setNickName(String nickName) {
        this.nickName = nickName;
    }
    public String getAvatar() {
        return this.avatar;
    }
    public void setAvatar(String avatar) {
        this.avatar = avatar;
    }
    public Integer getLevel() {
        return this.level;
    }
    public void setLevel(Integer level) {
        this.level = level;
    }
    public Integer getGender() {
        return this.gender;
    }
    public void setGender(Integer gender) {
        this.gender = gender;
    }
    public Short getAuth() {
        return this.auth;
    }
    public void setAuth(Short auth) {
        this.auth = auth;
    }
    public String getContent() {
        return this.content;
    }
    public void setContent(String content) {
        this.content = content;
    }
    public Long getDate() {
        return this.date;
    }
    public void setDate(Long date) {
        this.date = date;
    }
    public Integer getUnreadCnt() {
        return this.unreadCnt;
    }
    public void setUnreadCnt(Integer unreadCnt) {
        this.unreadCnt = unreadCnt;
    }
    public Integer getType() {
        return this.type;
    }
    public void setType(Integer type) {
        this.type = type;
    }
    /**
     * Convenient call for {@link org.greenrobot.greendao.AbstractDao#delete(Object)}.
     * Entity must attached to an entity context.
     */
    @Generated(hash = 128553479)
    public void delete() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }
        myDao.delete(this);
    }
    /**
     * Convenient call for {@link org.greenrobot.greendao.AbstractDao#refresh(Object)}.
     * Entity must attached to an entity context.
     */
    @Generated(hash = 1942392019)
    public void refresh() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }
        myDao.refresh(this);
    }
    /**
     * Convenient call for {@link org.greenrobot.greendao.AbstractDao#update(Object)}.
     * Entity must attached to an entity context.
     */
    @Generated(hash = 713229351)
    public void update() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }
        myDao.update(this);
    }
    /** called by internal mechanisms, do not call yourself. */
    @Generated(hash = 776461846)
    public void __setDaoSession(DaoSession daoSession) {
        this.daoSession = daoSession;
        myDao = daoSession != null ? daoSession.getChatSessionDao() : null;
    }


}

package laka.live.bean;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT. Enable "keep" sections if you want to edit. 

import org.greenrobot.greendao.annotation.Entity;
import org.greenrobot.greendao.annotation.Id;
import org.greenrobot.greendao.annotation.Generated;
import org.greenrobot.greendao.annotation.Property;
import org.greenrobot.greendao.DaoException;
import laka.live.dao.DaoSession;
import laka.live.dao.ChatMsgDao;

/**
 * Entity mapped to table "ChatMsg".
 */
@Entity(nameInDb="ChatMsg",active = true,createInDb = true)
public class ChatMsg {
    @Id(autoincrement = true)
    @Property(nameInDb="id")
    private Long id;
    private String sessionId;
    private String userId;
    private String nickName;
    private String avatar;
    private String content;
    private Long date;
    private Integer level;
    private Integer type;
    private Integer state;
    private Boolean isSend;
    private Boolean isUnread;
    private Integer giftId;
    /** Used to resolve relations */
    @Generated(hash = 2040040024)
    private transient DaoSession daoSession;
    /** Used for active entity operations. */
    @Generated(hash = 570074670)
    private transient ChatMsgDao myDao;
    @Generated(hash = 79031681)
    public ChatMsg(Long id, String sessionId, String userId, String nickName, String avatar,
            String content, Long date, Integer level, Integer type, Integer state, Boolean isSend,
            Boolean isUnread, Integer giftId) {
        this.id = id;
        this.sessionId = sessionId;
        this.userId = userId;
        this.nickName = nickName;
        this.avatar = avatar;
        this.content = content;
        this.date = date;
        this.level = level;
        this.type = type;
        this.state = state;
        this.isSend = isSend;
        this.isUnread = isUnread;
        this.giftId = giftId;
    }
    @Generated(hash = 1355502543)
    public ChatMsg() {
    }
    public Long getId() {
        return this.id;
    }
    public void setId(Long id) {
        this.id = id;
    }
    public String getSessionId() {
        return this.sessionId;
    }
    public void setSessionId(String sessionId) {
        this.sessionId = sessionId;
    }
    public String getUserId() {
        return this.userId;
    }
    public void setUserId(String userId) {
        this.userId = userId;
    }
    public String getNickName() {
        return this.nickName;
    }
    public void setNickName(String nickName) {
        this.nickName = nickName;
    }
    public String getAvatar() {
        return this.avatar;
    }
    public void setAvatar(String avatar) {
        this.avatar = avatar;
    }
    public String getContent() {
        return this.content;
    }
    public void setContent(String content) {
        this.content = content;
    }
    public Long getDate() {
        return this.date;
    }
    public void setDate(Long date) {
        this.date = date;
    }
    public Integer getLevel() {
        return this.level;
    }
    public void setLevel(Integer level) {
        this.level = level;
    }
    public Integer getType() {
        return this.type;
    }
    public void setType(Integer type) {
        this.type = type;
    }
    public Integer getState() {
        return this.state;
    }
    public void setState(Integer state) {
        this.state = state;
    }
    public Boolean getIsSend() {
        return this.isSend;
    }
    public void setIsSend(Boolean isSend) {
        this.isSend = isSend;
    }
    public Boolean getIsUnread() {
        return this.isUnread;
    }
    public void setIsUnread(Boolean isUnread) {
        this.isUnread = isUnread;
    }
    public Integer getGiftId() {
        return this.giftId;
    }
    public void setGiftId(Integer giftId) {
        this.giftId = giftId;
    }
    /**
     * Convenient call for {@link org.greenrobot.greendao.AbstractDao#delete(Object)}.
     * Entity must attached to an entity context.
     */
    @Generated(hash = 128553479)
    public void delete() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }
        myDao.delete(this);
    }
    /**
     * Convenient call for {@link org.greenrobot.greendao.AbstractDao#refresh(Object)}.
     * Entity must attached to an entity context.
     */
    @Generated(hash = 1942392019)
    public void refresh() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }
        myDao.refresh(this);
    }
    /**
     * Convenient call for {@link org.greenrobot.greendao.AbstractDao#update(Object)}.
     * Entity must attached to an entity context.
     */
    @Generated(hash = 713229351)
    public void update() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }
        myDao.update(this);
    }
    /** called by internal mechanisms, do not call yourself. */
    @Generated(hash = 1776335375)
    public void __setDaoSession(DaoSession daoSession) {
        this.daoSession = daoSession;
        myDao = daoSession != null ? daoSession.getChatMsgDao() : null;
    }



}
